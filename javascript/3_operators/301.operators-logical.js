/***************************************************************************
 * 逻辑运算：|| && ??
 *      - 逻辑或赋值 (x ||= y) 运算符仅在 x 为假值时才将 y 赋值给 x。
 *      - 逻辑与赋值 (x &&= y) 运算符仅在 x 为真值时才将 y 赋值给 x。
 *      - 空值合并赋值 (x ??= y) 运算符仅在 x 为空值时才将 y 赋值给 x。
 ***************************************************************************/
// --------------------------------------------------------------------
// 逻辑 ! 运算符应用于非布尔值
// --------------------------------------------------------------------
console.log(!undefined); // true
console.log(!null);      // true
console.log(!20);        // false
console.log(!0);        // true
console.log(!NaN);      // true
console.log(!{});       // false
console.log(!'');       // true
console.log(!'OK');     // false
console.log(!false);    // true
console.log(!true);     // false


// --------------------------------------------------------------------
// || 逻辑或赋值运算符
// --------------------------------------------------------------------
let foo;
foo ||= "bar";

// 等效于以下使用 逻辑或运算符 的语句
// x || (x = y)

console.log(foo);   // bar

foo = foo || "foo";
console.log(foo);   // bar


// --------------------------------------------------------------------
// && 逻辑与赋值运算符
// --------------------------------------------------------------------
const info = {
    name: 'Jim',
    age: 20
};

info.address &&= 'China';
console.log(info);  // { name: 'Jim', age: 20 }

// 仅在 x 为 true和存在时 时才将 y 赋值给 x
info.name &&= 'USA';
console.log(info);  // { name: 'USA', age: 20 }


// --------------------------------------------------------------------
// ?? 逻辑空值合并运算符
// 空值合并赋值运算符仅在 x 为 null 或 undefined 时才将 y 赋值给 x
//      x ??= y;
// 它等效于以下使用 空值合并运算符 的语句
//      x ?? (x = y);
// --------------------------------------------------------------------
const data = {
    name: 'Jim',
    age: 20
};

data.address ??= 'China';
console.log(data);  // { name: 'Jim', age: 20, address: 'China' }

// 仅在 x 为 null 或 undefined 时才将 y 赋值给 x
data.age ??= 18;
console.log(data);  // { name: 'Jim', age: 20, address: 'China' }