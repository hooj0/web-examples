/*******************************************************************************
 * let 变量作用域
 *      - let 变量声明，会提升到函数作用域中，避免污染全局作用域
 *
 * 总结：
 *      - 使用 let 关键字声明的变量是块级作用域的，不会被初始化为任何值，并且不会附加到全局对象
 *      - 使用 let 关键字重新声明变量会导致错误
 *      - 使用 let 关键字声明的变量的暂时性死亡区域从块开始到初始化被求值的时间段
 ******************************************************************************/
// 大括号内部和外部的拥有独立的作用域
let x = 1;
if (true) {
    let x = 2;
    console.log(x); // 2
}

console.log(x); // 1


// let 定义的全局变量，不会被挂载到 window 对象上
// console.log(window.x); // undefined

// var 定义的全局变量，会被挂载到 window 对象上
var y = 1
// console.log(window.y);  // 1


// -----------------------------------------------------------------------------
// 以下输出 3 3 3，而不是 1 2 3，因为 var i 是全局变量，所以每次循环都会覆盖之前的值
// -----------------------------------------------------------------------------
for (var i = 1; i <= 3; i++) {
    setTimeout(function () {
        console.log(i);
    }, 1000);
}

// 通过匿名闭包函数，创建新的作用域
for (var i = 0; i < 3; i++) {
    (function (i) {
        setTimeout(function () {
            console.log(i);
        }, 1000);
    })(i);
}


// -----------------------------------------------------------------------------
// ES6 let 定义的变量，不会被覆盖，每次循环都会创建新的变量
// -----------------------------------------------------------------------------
for (let i = 1; i <= 3; i++) {
    setTimeout(function () {
        console.log(i);
    }, 1000);
}

// 箭头函数
for (let i = 0; i < 3; i++) {
    setTimeout(() => console.log(i), 1000);
}


// -------------------------------------------------------------------------------
// var 定义的变量，会覆盖全局变量
// let 定义的变量，不会覆盖全局变量
// -------------------------------------------------------------------------------
var bar = 1;
var bar;
console.log("bar: ", bar);  // 1
var bar = 2;
console.log("bar: ", bar);  // 2

// SyntaxError: Identifier 'foo' has already been declared
let foo = 1;
// let foo;
// console.log("foo: ", foo);


// -----------------------------------------------------------------------------
// let 变量声明提升
//      - let 变量声明，会提升到函数作用域中，避免污染全局作用域
//      - let 变量声明，不会提升到全局作用域中
// -----------------------------------------------------------------------------
{
    // console.log(a); // ReferenceError: Cannot access 'a' before initialization
    let a = 1;
}


// -----------------------------------------------------------------------------
// 暂时性死区
// -----------------------------------------------------------------------------
{
    let log = function () {
        console.log('hello', message);
    };

    let message = 'world';
    log();  // hello world
}